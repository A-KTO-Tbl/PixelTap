from requests import post, get
from threading import Thread, Lock
from os import system as sys
from platform import system as s_name
from time import sleep
from random import randint
from colorama import Fore
from typing import Literal
from datetime import datetime, timedelta
from json import loads
from urllib.parse import unquote
from itertools import cycle

from Core.Tools.HPV_Getting_File_Paths import HPV_Get_Accounts
from Core.Tools.HPV_Proxy import HPV_Proxy_Checker
from Core.Tools.HPV_User_Agent import HPV_User_Agent

from Core.Config.HPV_Config import *







class HPV_PixelTap:
    '''
    AutoBot Ferma /// HPV
    ---------------------
    [1] - `–°–±–æ—Ä –º–æ–Ω–µ—Ç`
    
    [2] - `–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã`
    
    [3] - `–ü–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞`
    
    [4] - `–ê–ø–≥—Ä–µ–π–¥ –≤—Å–µ—Ö —Ä–æ–±–æ—Ç–æ–≤`
    
    [5] - `–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 5 –¥–æ 6 —á–∞—Å–æ–≤`
    
    [6] - `–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ 5-6 —á–∞—Å–æ–≤`
    '''



    def __init__(self, Name: str, URL: str, Proxy: dict) -> None:
        INFO = self.URL_Clean(URL)
        self.Name = Name                   # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
        self.TG_ID = INFO['ID']            # ID –∞–∫–∫–∞—É–Ω—Ç–∞
        self.Username = INFO['Username']   # Username –∞–∫–∫–∞—É–Ω—Ç–∞
        self.Token = INFO['Token']         # –¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞
        self.Proxy = Proxy                 # –ü—Ä–æ–∫—Å–∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)
        self.UA = HPV_User_Agent()         # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ User Agent
        self.Secret = 'ad3ef94479d09aa8a7043762c487b80a8ce7a868b171a943d1a92e9b6a871837'



    def URL_Clean(self, URL: str) -> dict:
        '''–û—á–∏—Å—Ç–∫–∞ —Å—Å—ã–ª–∫–∏'''

        try:
            ID = str(loads(unquote(unquote(unquote(URL.split('tgWebAppData=')[1].split('&tgWebAppVersion')[0]))).split('&')[1].split('user=')[1])['id'])
        except:
            ID = ''

        try:
            Username = str(loads(unquote(unquote(unquote(URL.split('tgWebAppData=')[1].split('&tgWebAppVersion')[0]))).split('&')[1].split('user=')[1])['username'])
        except:
            Username = ''

        try:
            Token = str(unquote(URL.split('tgWebAppData=')[1].split('&tgWebAppVersion')[0]))
        except:
            Token = ''
        
        return {'ID': ID, 'Username': Username, 'Token': Token}



    def Current_Time(self) -> str:
        '''–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è'''

        return Fore.BLUE + f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'



    def Logging(self, Type: Literal['Success', 'Warning', 'Error'], Name: str, Smile: str, Text: str) -> None:
        '''–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'''

        with Console_Lock:
            COLOR = Fore.GREEN if Type == 'Success' else Fore.YELLOW if Type == 'Warning' else Fore.RED # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            DIVIDER = Fore.BLACK + ' | '   # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

            Time = self.Current_Time()     # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            Name = Fore.MAGENTA + Name     # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
            Smile = COLOR + str(Smile)     # –°–º–∞–π–ª–∏–∫
            Text = COLOR + Text            # –¢–µ–∫—Å—Ç –ª–æ–≥–∞

            print(Time + DIVIDER + Smile + DIVIDER + Text + DIVIDER + Name)



    def Get_Info(self) -> dict:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–æ–∫–µ'''

        URL = 'https://api-clicker.pixelverse.xyz/api/users'
        Headers = {'authority': 'api-clicker.pixelverse.xyz', 'accept': 'application/json, text/plain, */*', 'accept-language': 'ru,en;q=0.9', 'initdata': self.Token, 'origin': 'https://sexyzbot.pxlvrs.io', 'referer': 'https://sexyzbot.pxlvrs.io/', 'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "YaBrowser";v="24.4", "Yowser";v="2.5"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'secret': self.Secret, 'tg-id': self.TG_ID, 'user-agent': self.UA, 'username': self.Username}

        try:
            Balance = f'{get(URL, headers=Headers, proxies=self.Proxy).json()["clicksCount"]:,.2f}' # –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            return {'Status': True, 'Balance': Balance}
        except:
            return {'Status': False}



    def Daily_Reward(self) -> dict:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã'''

        URL = 'https://api-clicker.pixelverse.xyz/api/daily-rewards/claim'
        Headers = {'authority': 'api-clicker.pixelverse.xyz', 'accept': 'application/json, text/plain, */*', 'accept-language': 'ru,en;q=0.9', 'initdata': self.Token, 'origin': 'https://sexyzbot.pxlvrs.io', 'referer': 'https://sexyzbot.pxlvrs.io/', 'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "YaBrowser";v="24.4", "Yowser";v="2.5"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'secret': self.Secret, 'tg-id': self.TG_ID, 'user-agent': self.UA, 'username': self.Username}

        try:
            Collected = post(URL, headers=Headers, proxies=self.Proxy).json()['amount']
            return {'Status': True, 'Collected': f'{Collected:,.2f}'}
        except:
            return {'Status': False}



    def Claim(self) -> None:
        '''–°–±–æ—Ä –º–æ–Ω–µ—Ç'''

        URL = 'https://api-clicker.pixelverse.xyz/api/mining/claim'
        Headers = {'authority': 'api-clicker.pixelverse.xyz', 'accept': 'application/json, text/plain, */*', 'accept-language': 'ru,en;q=0.9', 'initdata': self.Token, 'origin': 'https://sexyzbot.pxlvrs.io', 'referer': 'https://sexyzbot.pxlvrs.io/', 'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "YaBrowser";v="24.4", "Yowser";v="2.5"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'secret': self.Secret, 'tg-id': self.TG_ID, 'user-agent': self.UA, 'username': self.Username}

        try:
            HPV = post(URL, headers=Headers, proxies=self.Proxy).json()['claimedAmount']
            self.Logging('Success', self.Name, 'üü¢', f'–ú–æ–Ω–µ—Ç—ã —Å–æ–±—Ä–∞–Ω—ã! +{HPV:,.2f}')
        except:
            self.Logging('Error', self.Name, 'üî¥', '–ú–æ–Ω–µ—Ç—ã –Ω–µ —Å–æ–±—Ä–∞–Ω—ã!')



    def Get_Pets(self) -> dict:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–æ–±–æ—Ç–æ–≤'''

        URL = 'https://api-clicker.pixelverse.xyz/api/pets'
        Headers = {'authority': 'api-clicker.pixelverse.xyz', 'accept': 'application/json, text/plain, */*', 'accept-language': 'ru,en;q=0.9', 'initdata': self.Token, 'origin': 'https://sexyzbot.pxlvrs.io', 'referer': 'https://sexyzbot.pxlvrs.io/', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'secret': self.Secret, 'tg-id': self.TG_ID, 'user-agent': self.UA, 'username': self.Username}

        try:
            HPV = get(URL, headers=Headers, proxies=self.Proxy).json()['data']

            Pets = [] # –°–ø–∏—Å–æ–∫ —Ö—Ä–∞–Ω—è—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Ä–æ–±–æ—Ç–∞—Ö

            for Pet in HPV:
                Name = Pet['name'] # –ò–º—è —Ä–æ–±–æ—Ç–∞
                ID = Pet['userPet']['id'] # ID —Ä–æ–±–æ—Ç–∞
                LVL = Pet['userPet']['level'] # –£—Ä–æ–≤–µ–Ω—å —Ä–æ–±–æ—Ç–∞
                UP_Price = Pet['userPet']['levelUpPrice'] # –¶–µ–Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è —Ä–æ–±–æ—Ç–∞
                Pets.append({Name: {'ID': ID, 'LVL': LVL, 'Upgrade Price': UP_Price}})

            return {'Status': True, 'Pets': Pets}
        except:
            return {'Status': False}



    def Buy_Pet(self) -> bool:
        '''–ü–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞'''

        URL = 'https://api-clicker.pixelverse.xyz/api/pets/buy'
        Headers = {'authority': 'api-clicker.pixelverse.xyz', 'accept': 'application/json, text/plain, */*', 'accept-language': 'ru,en;q=0.9', 'initdata': self.Token, 'origin': 'https://sexyzbot.pxlvrs.io', 'referer': 'https://sexyzbot.pxlvrs.io/', 'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "YaBrowser";v="24.4", "Yowser";v="2.5"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'secret': self.Secret, 'tg-id': self.TG_ID, 'user-agent': self.UA, 'username': self.Username}
        Params = {'tg-id': self.TG_ID, 'secret': self.Secret}

        try:
            post(URL, params=Params, headers=Headers, json={}, proxies=self.Proxy).json()['level']
            return True
        except:
            return False



    def Upgrade_Pet(self, ID: str) -> dict:
        '''–£–ª—É—á—à–µ–Ω–∏–µ —Ä–æ–±–æ—Ç–∞'''

        URL = f'https://api-clicker.pixelverse.xyz/api/pets/user-pets/{ID}/level-up'
        Headers = {'authority': 'api-clicker.pixelverse.xyz', 'accept': 'application/json, text/plain, */*', 'accept-language': 'ru,en;q=0.9', 'initdata': self.Token, 'origin': 'https://sexyzbot.pxlvrs.io', 'referer': 'https://sexyzbot.pxlvrs.io/', 'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "YaBrowser";v="24.4", "Yowser";v="2.5"', 'sec-ch-ua-mobile': '?0', 'sec-ch-ua-platform': '"Windows"', 'sec-fetch-dest': 'empty', 'sec-fetch-mode': 'cors', 'sec-fetch-site': 'cross-site', 'secret': self.Secret, 'tg-id': self.TG_ID, 'user-agent': self.UA, 'username': self.Username}

        try:
            HPV = post(URL, headers=Headers, proxies=self.Proxy).json()['level']
            return {'Status': True, 'NEW_LVL': HPV}
        except:
            return {'Status': False}



    def Run(self):
        '''–ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞'''

        while True:
            try:
                if self.Get_Info()['Status']:
                    self.Logging('Success', self.Name, 'üü¢', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
                    self.Logging('Success', self.Name, 'üí∞', f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {self.Get_Info()["Balance"]}')
                    Pets = self.Get_Pets()['Pets'] # –°–ø–∏—Å–æ–∫ —Ä–æ–±–æ—Ç–æ–≤


                    self.Claim() # –°–±–æ—Ä –º–æ–Ω–µ—Ç
                    sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ


                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
                    Daily_Reward = self.Daily_Reward()
                    if Daily_Reward['Status']:
                        self.Logging('Success', self.Name, 'üéÅ', f'–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞! +{Daily_Reward["Collected"]}')
                        sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ


                    # –ü–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ—â—ë –Ω–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ
                    if len(Pets) < MAX_PETS:
                        if self.Buy_Pet():
                            self.Logging('Success', self.Name, 'üëæ', '–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω –Ω–æ–≤—ã–π —Ä–æ–±–æ—Ç')
                            sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ


                    # –ê–ø–≥—Ä–µ–π–¥ –≤—Å–µ—Ö —Ä–æ–±–æ—Ç–æ–≤ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ —É—Ä–æ–≤–Ω—è
                    Updates = {}
                    while True:
                        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –≤—Å–µ —Ä–æ–±–æ—Ç—ã —É–ª—É—á—à–µ–Ω—ã (–∏–ª–∏ –Ω–µ—Ç) –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ —É—Ä–æ–≤–Ω—è
                        if all(Updates) and len(Updates) == len(Pets):
                            break

                        for Pet in Pets:
                            for Name, Conf in Pet.items():
                                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏ —É—Ä–æ–≤–Ω—è –Ω–∏–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞
                                Balance = int(float(self.Get_Info()['Balance'].replace(',', ''))) # –ë–∞–ª–∞–Ω—Å

                                if Conf['Upgrade Price'] <= Balance and Conf['LVL'] < MAX_LVL:
                                    Upgrade_Pet = self.Upgrade_Pet(Conf['ID'])
                                    if Upgrade_Pet['Status']:
                                        self.Logging('Success', self.Name, 'üü¢', f'–ê–ø–≥—Ä–µ–π–¥ {Name} —É—Å–ø–µ—à–µ–Ω! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {Upgrade_Pet["NEW_LVL"]}')
                                        sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                                    else:
                                        Updates[Name] = True
                                else:
                                    Updates[Name] = True


                    Waiting = randint(18_000, 21_000) # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
                    Waiting_STR = (datetime.now() + timedelta(seconds=Waiting)).strftime('%Y-%m-%d %H:%M:%S') # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ

                    self.Logging('Success', self.Name, 'üí∞', f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {self.Get_Info()["Balance"]}')
                    self.Logging('Warning', self.Name, '‚è≥', f'–°–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä: {Waiting_STR}!')

                    sleep(Waiting) # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 5 –¥–æ 6 —á–∞—Å–æ–≤

                else: # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É—Å–ø–µ—à–Ω–∞
                    self.Logging('Error', self.Name, 'üî¥', '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!')
                    sleep(randint(33, 66)) # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 33 –¥–æ 66 —Å–µ–∫—É–Ω–¥
            except:
                pass







if __name__ == '__main__':
    sys('cls') if s_name() == 'Windows' else sys('clear')

    Console_Lock = Lock()
    Proxy = HPV_Proxy_Checker()

    def Start_Thread(Account, URL, Proxy = None):
        PixelTap = HPV_PixelTap(Account, URL, Proxy)
        PixelTap.Run()

    if Proxy:
        DIVIDER = Fore.BLACK + ' | '
        Time = Fore.BLUE + f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'
        Text = Fore.GREEN + f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ –æ–∫–æ–Ω—á–µ–Ω–∞! –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã–µ: {len(Proxy)}'
        print(Time + DIVIDER + 'üåê' + DIVIDER + Text)
        sleep(5)

    for Account, URL in HPV_Get_Accounts().items():
        if Proxy:
            Proxy = cycle(Proxy)
            Thread(target=Start_Thread, args=(Account, URL, next(Proxy),)).start()
        else:
            Thread(target=Start_Thread, args=(Account, URL,)).start()


